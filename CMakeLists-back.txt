cmake_minimum_required(VERSION 3.18)
cmake_policy(SET CMP0079 NEW)
project(osiris-core VERSION 0.1.0 LANGUAGES CXX)

# Ustawienie standardu C++ na C++20.
# Jest to kluczowe dla korzystania z najnowszych funkcji języka i zapewnienia kompatybilności
# z zaktualizowanymi bibliotekami.
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON) # Wymuś użycie C++20; jeśli kompilator nie obsługuje, zgłoś błąd.
set(CMAKE_CXX_EXTENSIONS OFF) # Wyłącz rozszerzenia GNU, aby zachować ścisłą zgodność ze standardem.

# Zarządzanie zależnościami zewnętrznymi za pomocą FetchContent.
# Wszystkie tagi GIT_TAG zostały zaktualizowane do najnowszych stabilnych wersji.

# CryptoPP
include(FetchContent)
FetchContent_Declare(
  cryptopp
  GIT_REPOSITORY https://github.com/weidai11/cryptopp.git
  GIT_TAG CRYPTOPP_8_9_0 # Zaktualizowano do najnowszej wersji (8.9.0)
)
FetchContent_MakeAvailable(cryptopp)

# nlohmann/json
include(FetchContent)
FetchContent_Declare(
  json
  GIT_REPOSITORY https://github.com/nlohmann/json.git
  GIT_TAG v3.12.0 # Zaktualizowano do najnowszej wersji (v3.12.0)
)
FetchContent_MakeAvailable(json)

# cpp-httplib
include(FetchContent)
FetchContent_Declare(
  httplib
  GIT_REPOSITORY https://github.com/yhirose/cpp-httplib.git
  GIT_TAG v0.22.0 # Zaktualizowano do najnowszej wersji (v0.22.0)
  CMAKE_ARGS HTTPLIB_USE_ZLIB_IF_AVAILABLE=OFF HTTPLIB_COMPILE=OFF
)
FetchContent_MakeAvailable(httplib)

# GoogleTest
include(FetchContent)
FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG v1.17.0 # Zaktualizowano do najnowszej wersji (v1.17.0)
)
FetchContent_MakeAvailable(googletest)

# Prometheus-cpp
include(FetchContent)
set(ENABLE_TESTING OFF)
set(ENABLE_BENCHMARKS OFF)
set(ENABLE_PUSH OFF)
FetchContent_Declare(
  prometheus-cpp
  GIT_REPOSITORY https://github.com/jupp0r/prometheus-cpp.git
  GIT_TAG v1.2.2 # Zaktualizowano do najnowszej wersji (v1.2.2)
  CMAKE_ARGS ENABLE_COMPRESSION=OFF ENABLE_PUSH=OFF ENABLE_TESTING=OFF
)
FetchContent_MakeAvailable(prometheus-cpp)

# Katalogi dołączane (include directories)
# Zapewniają, że kompilator znajdzie pliki nagłówkowe dla wszystkich modułów i bibliotek.
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${cryptopp_SOURCE_DIR}
    ${json_SOURCE_DIR}/include
    ${httplib_SOURCE_DIR}
    ${googletest_SOURCE_DIR}/googletest/include
    ${googletest_SOURCE_DIR}/googlemock/include
)

# Dodanie plików źródłowych dla biblioteki osiris-core
add_library(osiris-core STATIC
    src/chain.cpp
    src/config.cpp
    src/network/HttpClient.cpp
    src/contract/Engine.cpp
    src/contract/Parser.cpp
    src/consensus/PoW.cpp
    src/consensus/PoS.cpp
    src/modules/social/social.cpp
)

find_package(yaml-cpp REQUIRED)
find_package(Boost 1.74 COMPONENTS system thread REQUIRED)
add_compile_definitions(BOOST_ASIO_HAS_STD_EXPERIMENTAL_FUTURE=0 BOOST_ASIO_DISABLE_STD_EXPERIMENTAL_FUTURE=1 BOOST_ASIO_DISABLE_CONCEPTS=1 BOOST_ASIO_DISABLE_AWAITABLES CPPHTTPLIB_NO_ZLIB_SUPPORT)

target_include_directories(osiris-core PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_SOURCE_DIR}/src/network
    ${CMAKE_CURRENT_SOURCE_DIR}/src/contract
    ${CMAKE_CURRENT_SOURCE_DIR}/src/consensus
    ${CMAKE_CURRENT_SOURCE_DIR}/src/modules/social
    ${yaml-cpp_INCLUDE_DIRS}
    ${Boost_INCLUDE_DIRS}
    ${CryptoPP_INCLUDE_DIRS}
)

target_link_libraries(osiris-core PUBLIC ${YAML_CPP_LIBRARIES} ${Boost_LIBRARIES} cryptopp-static)

# Dodanie pliku wykonywalnego dla węzła
add_executable(osiris-node src/main_executable.cpp)

# Linkowanie biblioteki osiris-core i innych modułów do pliku wykonywalnego osiris-node
target_link_libraries(osiris-node
    osiris-core
    osiris-node-status
    osiris-monitoring
)

# Dodanie podkatalogów dla modułów
# Standard C++ ustawiony na górnym poziomie (CMAKE_CXX_STANDARD) powinien być dziedziczony
# przez te podkatalogi, chyba że są one jawnie nadpisywane w ich własnych plikach CMakeLists.txt.
add_subdirectory(tests)
add_subdirectory(src/seth)
add_subdirectory(src/modules)
add_subdirectory(src/status)
add_subdirectory(src/crypto)
add_subdirectory(src/metrics_server)
add_subdirectory(src/node)
add_subdirectory(src/monitoring)

# Cele instalacyjne
install(TARGETS osiris-core osiris-node DESTINATION bin)
install(FILES src/chain.hpp src/config.hpp src/types.hpp DESTINATION include/osiris)
install(DIRECTORY src/consensus DESTINATION include/osiris)
install(DIRECTORY src/contract DESTINATION include/osiris)
install(DIRECTORY src/network DESTINATION include/osiris)
install(DIRECTORY src/storage DESTINATION include/osiris)
install(DIRECTORY src/seth DESTINATION include/osiris)
install(DIRECTORY src/modules DESTINATION include/osiris)
install(DIRECTORY src/status DESTINATION include/osiris)
install(DIRECTORY src/crypto DESTINATION include/osiris)
install(DIRECTORY src/metrics_server DESTINATION include/osiris)
install(DIRECTORY src/modules/httplib DESTINATION include/osiris)
install(DIRECTORY src/modules/httplib DESTINATION include/osiris)
