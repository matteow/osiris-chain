cmake_minimum_required(VERSION 3.18)
project(osiris-core VERSION 0.1.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Find Crypto++
find_path(CRYPTOPP_INCLUDE_DIR cryptopp/sha.h
          PATHS /usr/include /usr/local/include)
find_library(CRYPTOPP_LIBRARY NAMES cryptopp crypto++
             PATHS /usr/lib /usr/local/lib /usr/lib/x86_64-linux-gnu)

if(NOT CRYPTOPP_INCLUDE_DIR OR NOT CRYPTOPP_LIBRARY)
    message(FATAL_ERROR "Crypto++ not found. Please install libcrypto++-dev")
endif()

message(STATUS "Found Crypto++ includes: ${CRYPTOPP_INCLUDE_DIR}")
message(STATUS "Found Crypto++ library: ${CRYPTOPP_LIBRARY}")

# Find Boost (minimum version 1.88)
set(BOOST_MIN_VERSION "1.88.0")
find_package(Boost ${BOOST_MIN_VERSION} REQUIRED COMPONENTS system thread)

# Find other dependencies
find_package(yaml-cpp REQUIRED)
find_package(ZLIB REQUIRED)
find_package(CURL REQUIRED)

# Find JSON library
find_path(JSON_INCLUDE_DIR nlohmann/json.hpp
          PATHS /usr/include /usr/include/nlohmann)
if(NOT JSON_INCLUDE_DIR)
    message(FATAL_ERROR "nlohmann/json.hpp not found. Install with: sudo apt-get install nlohmann-json3-dev")
endif()

# After finding JSON
find_path(JSON_INCLUDE_DIR nlohmann/json.hpp
          PATHS /usr/include /usr/include/nlohmann)
if(NOT JSON_INCLUDE_DIR)
    message(FATAL_ERROR "nlohmann/json.hpp not found. Install with: sudo apt-get install nlohmann-json3-dev")
endif()

# Create an interface target for JSON
add_library(nlohmann_json INTERFACE IMPORTED)
set_target_properties(nlohmann_json PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${JSON_INCLUDE_DIR}"
)

# Update target_link_libraries for your executables
target_link_libraries(osiris-core
    ${CRYPTOPP_LIBRARY}
    ${Boost_LIBRARIES}
    yaml-cpp
    ${ZLIB_LIBRARIES}
    ${CURL_LIBRARIES}
    nlohmann_json  # Add this line
)

target_link_libraries(osiris-node
    osiris-core
    nlohmann_json  # Add this line
)

include_directories(
    ${CMAKE_SOURCE_DIR}/src
    ${CMAKE_SOURCE_DIR}/include
    ${CRYPTOPP_INCLUDE_DIR}
    ${Boost_INCLUDE_DIRS}
    ${yaml-cpp_INCLUDE_DIRS}
    ${JSON_INCLUDE_DIR}  # Add this line
)

# Add your library
add_library(osiris-core STATIC
    src/chain.cpp
    src/config.cpp
    # Add all other source files here
)

# Link libraries
target_link_libraries(osiris-core
    ${CRYPTOPP_LIBRARY}
    ${Boost_LIBRARIES}
    yaml-cpp
    ${ZLIB_LIBRARIES}
    ${CURL_LIBRARIES}
)

# Add executable
add_executable(osiris-node src/main_executable.cpp)
target_link_libraries(osiris-node osiris-core)

# Installation
install(TARGETS osiris-node DESTINATION bin)
install(TARGETS osiris-core DESTINATION lib)